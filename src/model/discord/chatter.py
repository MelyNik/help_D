"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π chatter.py —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PolicyEngine –∏ "10% —Ä–µ–∞–∫—Ü–∏—è"
–ó–ê–ú–ï–ù–ò–¢–ï –í–ï–°–¨ –§–ê–ô–õ src/model/discord/chatter.py –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥
"""
import asyncio
import random
import re
from loguru import logger
from curl_cffi.requests import AsyncSession

from src.utils.config import Config
from src.utils.constants import Account
from src.model.gpt import ask_chatgpt


# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTION_RE = re.compile(r"\?|\b(–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫|–∫–æ–≥–¥–∞|–≥–¥–µ|—á—Ç–æ|–∫—Ç–æ|why|how|when|where|what|who)\b", re.I)

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π
REACTION_EMOJI = ["üëç", "üî•", "üôè", "üí™", "‚ú®", "‚ù§Ô∏è", "üòä"]

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (–≥–æ–ª–æ–µ gm)
GM_WHITELIST = ["gm everyone", "gm all", "gm fam", "gm folks", "gm team", "gm builders", "gm frens"]


def should_reply_with_reaction(incoming_text: str, reaction_chance: float = 0.10) -> bool:
    """–ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞, –≤ 10% —Å–ª—É—á–∞–µ–≤ –æ—Ç–≤–µ—á–∞–µ–º —Ä–µ–∞–∫—Ü–∏–µ–π –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞"""
    txt = (incoming_text or "").strip()
    has_question = bool(QUESTION_RE.search(txt))
    return (not has_question) and (random.random() < reaction_chance)


def filter_gm(text: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –≥–æ–ª–æ–µ 'gm' –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    t = text.strip().lower()
    if t == "gm":
        return random.choice(GM_WHITELIST)
    return text


async def ai_chatter(account: Account, config: Config, session: AsyncSession) -> bool:
    """
    AI-—á–∞—Ç—Ç–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏
    """
    try:
        policy = getattr(config, 'POLICY_ENGINE', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
        if policy:
            if policy.is_silenced(account.index):
                logger.warning(f"[{account.index}] Account is silenced (red flag)")
                return False
            
            if not policy.is_active_now():
                logger.info(f"[{account.index}] Outside active hours")
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
        channel_id = config.AI_CHATTER.CHANNEL_ID
        messages = await fetch_channel_messages(session, account.token, channel_id, limit=50)
        
        if not messages:
            logger.warning(f"[{account.index}] No messages in channel")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        num_messages = random.randint(*config.AI_CHATTER.MESSAGES_TO_SEND_PER_ACCOUNT)
        sent_count = 0
        
        for _ in range(num_messages):
            # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π ===
            if policy and not policy.can_initiate_now(account.index):
                logger.info(f"[{account.index}] Cannot initiate now (policy)")
                break
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            target_message = find_reply_target(messages, account, config)
            
            if not target_message:
                logger.debug(f"[{account.index}] No suitable message to reply")
                continue
            
            # === 10% —Ä–µ–∞–∫—Ü–∏—è –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ===
            if should_reply_with_reaction(target_message.get("content", "")):
                emoji = random.choice(REACTION_EMOJI)
                success = await add_reaction(session, account.token, channel_id, target_message["id"], emoji)
                if success:
                    logger.success(f"[{account.index}] Sent reaction: {emoji}")
                    sent_count += 1
            else:
                # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT ===
                api_key = random.choice(config.CHAT_GPT.API_KEYS)
                system_prompt = get_system_prompt(config)
                user_message = build_context(messages, target_message)
                
                ok, response_text = await ask_chatgpt(
                    api_key,
                    config.CHAT_GPT.MODEL,
                    user_message,
                    system_prompt,
                    proxy=config.CHAT_GPT.PROXY_FOR_CHAT_GPT
                )
                
                if not ok:
                    logger.error(f"[{account.index}] GPT failed")
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º "–≥–æ–ª–æ–µ gm"
                response_text = filter_gm(response_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
                if policy and policy.is_duplicate(response_text):
                    logger.warning(f"[{account.index}] Duplicate message, skipping")
                    continue
                
                # –ü–∞—É–∑–∞ "–ø–æ–¥—É–º–∞–ª"
                think_delay = random.randint(*config.AI_CHATTER.PAUSE_BEFORE_MESSAGE)
                logger.info(f"[{account.index}] Thinking for {think_delay}s...")
                await asyncio.sleep(think_delay)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞
                success = await send_reply(
                    session,
                    account.token,
                    channel_id,
                    response_text,
                    target_message["id"]
                )
                
                if success:
                    logger.success(f"[{account.index}] Sent reply: {response_text[:50]}...")
                    sent_count += 1
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–æ–ª–∏—Ç–∏–∫—É
                    if policy:
                        policy.record_initiative(account.index)
                        policy.record_message(response_text)
                elif "429" in str(success):
                    # Rate limit - –º–æ–ª—á–∏–º
                    if policy:
                        policy.set_silence(account.index)
                    break
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if sent_count < num_messages:
                pause = random.randint(*config.AI_CHATTER.PAUSE_BETWEEN_MESSAGES)
                logger.info(f"[{account.index}] Waiting {pause}s...")
                await asyncio.sleep(pause)
        
        logger.info(f"[{account.index}] AI Chatter finished: {sent_count} messages sent")
        return sent_count > 0
    
    except Exception as e:
        logger.error(f"[{account.index}] ai_chatter failed: {e}")
        return False


async def fetch_channel_messages(session: AsyncSession, token: str, channel_id: str, limit: int = 50):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        url = f"https://discord.com/api/v9/channels/{channel_id}/messages?limit={limit}"
        response = await session.get(url, headers={"Authorization": token})
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Failed to fetch messages: {response.status_code}")
            return []
    except Exception as e:
        logger.error(f"Error fetching messages: {e}")
        return []


def find_reply_target(messages: list, account: Account, config: Config):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20
    recent = messages[:20]
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∫–∞)
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å author.id, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∏–Ω—Ñ—ã –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    
    if not recent:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ANSWER_PERCENTAGE –∏ REPLY_PERCENTAGE
    target = random.choice(recent)
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: 100% –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, REPLY_PERCENTAGE% –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    content = target.get("content", "")
    has_question = bool(QUESTION_RE.search(content))
    
    if has_question:
        return target
    elif random.randint(1, 100) <= config.AI_CHATTER.REPLY_PERCENTAGE:
        return target
    
    return None


def build_context(messages: list, target_message: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT"""
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π + —Ü–µ–ª–µ–≤–æ–µ
    recent = messages[:5]
    context_parts = []
    
    for msg in reversed(recent):
        author = msg.get("author", {}).get("username", "User")
        content = msg.get("content", "")
        context_parts.append(f"{author}: {content}")
    
    return "\n".join(context_parts)


def get_system_prompt(config: Config) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    content_cfg = config.__dict__.get("POLICY", {}).get("CONTENT", {})
    min_words = content_cfg.get("MIN_WORDS", 3)
    max_words = content_cfg.get("MAX_WORDS", 11)
    
    return f"""You are a helpful Discord user chatting naturally in a community.
- Reply in {min_words}-{max_words} words
- Be casual and friendly
- No links, no channel mentions
- Match the conversation tone
- Don't say you're an AI"""


async def send_reply(session: AsyncSession, token: str, channel_id: str, content: str, message_id: str = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º reply)"""
    try:
        url = f"https://discord.com/api/v9/channels/{channel_id}/messages"
        payload = {"content": content}
        
        if message_id:
            payload["message_reference"] = {"message_id": message_id}
        
        response = await session.post(
            url,
            json=payload,
            headers={
                "Authorization": token,
                "Content-Type": "application/json"
            }
        )
        
        if response.status_code == 200:
            return True
        elif response.status_code == 429:
            logger.warning(f"Rate limited: {response.json()}")
            return "429"
        else:
            logger.error(f"Send failed: {response.status_code} {response.text[:200]}")
            return False
    except Exception as e:
        logger.error(f"Error sending reply: {e}")
        return False


async def add_reaction(session: AsyncSession, token: str, channel_id: str, message_id: str, emoji: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # URL-encode emoji
        import urllib.parse
        emoji_encoded = urllib.parse.quote(emoji)
        
        url = f"https://discord.com/api/v9/channels/{channel_id}/messages/{message_id}/reactions/{emoji_encoded}/@me"
        response = await session.put(url, headers={"Authorization": token})
        
        return response.status_code == 204
    except Exception as e:
        logger.error(f"Error adding reaction: {e}")
        return False